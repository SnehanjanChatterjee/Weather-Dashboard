{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Components/lhscontents/lhscontents.component.ts","webpack:///src/app/Components/lhscontents/lhscontents.component.html","webpack:///src/app/Components/main/main.component.ts","webpack:///src/app/Components/main/main.component.html","webpack:///src/app/Constants/weather-dashboard-constants.ts","webpack:///src/app/Services/weather.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/app.routing.ts","webpack:///src/app/appConfig.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","LHSContentsComponent","_weatherService","cityName","unitTypeFahrenheit","displayUnitType","onUnitTypeChange","setUnitType","loadCurrentWeatherByCityName","locationWeatherData","name","subscribe","data","emit","handleSwitchSelection","selector","templateUrl","styleUrls","MainComponent","pageLoading","showErrorDiv","errorMessage","responseWeatherData","window","setTimeout","currentWeatherData","console","log","responseProductError","updateDataOnSwitchSelection","getCurrentWeatherByCityName","CELCIUS_UNIT","KELVIN_UNIT","FAHRENHEIT_UNIT","FAHRENHEIT","CELCIUS","WeatherService","_http","unitTypeSubject","unit","getValue","url","endpoints","weather","get","pipe","errorHandler","unitType","next","asObservable","error","message","providedIn","AppComponent","title","AppModule","declarations","imports","providers","bootstrap","routes","path","redirectTo","pathMatch","component","routing","forRoot","APIUrl","APIKey","Api","box","find","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { CELCIUS, FAHRENHEIT } from 'src/app/Constants/weather-dashboard-constants';\nimport { CurrentWeather } from 'src/app/Models/weather.models';\nimport { WeatherService } from 'src/app/Services/weather.service';\n\n@Component({\n  selector: 'app-lhscontents',\n  templateUrl: './lhscontents.component.html',\n  styleUrls: ['./lhscontents.component.css']\n})\nexport class LHSContentsComponent implements OnInit {\n\n  constructor(private _weatherService: WeatherService) { }\n  cityName: string = 'Kolkata';\n  unitTypeFahrenheit: boolean = false;\n  displayUnitType: string = CELCIUS;\n\n  @Input() locationWeatherData: CurrentWeather;\n  @Output() onUnitTypeChange: any = new EventEmitter<CurrentWeather>();\n\n  ngOnInit(): void {\n  }\n\n  handleSwitchSelection() {\n    this._weatherService.setUnitType(this.unitTypeFahrenheit);\n    this._weatherService.loadCurrentWeatherByCityName(this.locationWeatherData.name).subscribe(\n      data => {\n        this.locationWeatherData = data;\n        this.onUnitTypeChange.emit(this.locationWeatherData);\n        this.displayUnitType = this.unitTypeFahrenheit ? FAHRENHEIT : CELCIUS;\n      }\n    );\n  }\n\n}\n","<div id=\"mainLHSDiv\">\n    <div class=\"unitToggler\">\n        <div class=\"unitTogglerContentCel\">\n            <span>&#8451;</span>\n        </div>\n        <div class=\"unitTogglerContent\">\n            <mat-slide-toggle color=primary [(ngModel)]=\"unitTypeFahrenheit\" (change)=\"handleSwitchSelection()\"></mat-slide-toggle>\n        </div>\n        <div class=\"unitTogglerContentFah\">\n            <span>&#8457;</span>\n        </div>\n    </div>\n    <div id=\"tempInfo\" *ngIf=\"locationWeatherData\">\n        <!-- Celcius -->\n        <div class=\"temp\" *ngIf=\"displayUnitType === 'celcius'\">\n            {{locationWeatherData.main.temp | number: '1.0-0'}}\n            <span>&#8451;</span>\n        </div>\n        <!-- Fahrenheit -->\n        <div class=\"temp\" *ngIf=\"displayUnitType === 'fahrenheit'\">\n            {{locationWeatherData.main.temp | number: '1.0-0'}}\n            <span>&#8457;</span>\n        </div>\n        <div *ngIf=\"locationWeatherData\" class=\"cityInfo\">\n            {{locationWeatherData.name}}\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { CurrentWeather } from 'src/app/Models/weather.models';\nimport { WeatherService } from 'src/app/Services/weather.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n\n  cityName: string = '';\n  currentWeatherData: CurrentWeather;\n  pageLoading: boolean = false;\n  showErrorDiv: boolean = false;\n  errorMessage: string = '';\n  constructor(private _weatherService: WeatherService) { }\n\n  ngOnInit(): void {\n  }\n\n  getCurrentWeatherByCityName() {\n\n    this.pageLoading = true;\n    this._weatherService.loadCurrentWeatherByCityName(this.cityName).subscribe(\n      responseWeatherData => {\n        window.setTimeout(() => {\n          this.currentWeatherData = responseWeatherData;\n          console.log(this.currentWeatherData);\n          this.pageLoading = false;\n          this.showErrorDiv = false;\n        }, 2000);\n      },\n      responseProductError => {\n        console.log(responseProductError);\n        this.currentWeatherData = null;\n        window.setTimeout(() => {\n          this.pageLoading = false;\n          this.showErrorDiv = true;\n          this.errorMessage = responseProductError;\n        }, 2000);\n      }\n    );\n  }\n\n  updateDataOnSwitchSelection(data: any) {\n    this.currentWeatherData = data;\n  }\n\n}\n","<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-md-3\" style=\"padding: 0;\">\n            <app-lhscontents [locationWeatherData]=\"currentWeatherData\" (onUnitTypeChange)=\"updateDataOnSwitchSelection($event)\"></app-lhscontents>\n        </div>\n        <div class=\"col-md-9\" style=\"padding: 0;\">\n            <div [ngClass]=\"{loader:pageLoading}\"></div>\n            <div id=\"mainDiv\">\n                <div id=\"searchDiv\">\n                    <mat-form-field class=\"example-form-field\" appearance=\"fill\">\n                        <mat-label style=\"color: black;\">Enter City Name</mat-label>\n                        <input matInput type=\"text\" [(ngModel)]=\"cityName\">\n                        <button *ngIf=\"cityName\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"cityName=''\">\n                            <mat-icon>close</mat-icon>\n                        </button>\n                        <button matPrefix mat-icon-button (click)=\"getCurrentWeatherByCityName()\">\n                            <mat-icon>search</mat-icon>\n                        </button>\n                    </mat-form-field>                \n                </div>\n                <div *ngIf=\"showErrorDiv\" class=\"errorDiv\">\n                    <mat-icon>error</mat-icon>\n                    <p>Error: {{errorMessage}}</p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","export const CELCIUS_UNIT = 'metric'; // Celsius unit \r\nexport const KELVIN_UNIT = 'standard'; // Kelvin unit (default)\r\nexport const FAHRENHEIT_UNIT = 'imperial'; // Kelvin unit (default)\r\n\r\nexport const FAHRENHEIT = 'fahrenheit';\r\nexport const CELCIUS = 'celcius';","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject, Observable, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CurrentWeather } from '../Models/weather.models';\nimport { Api, APIKey, APIUrl } from '../appConfig';\nimport { CELCIUS_UNIT, FAHRENHEIT_UNIT } from '../Constants/weather-dashboard-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private _http: HttpClient) { }\n\n  private unitTypeSubject = new BehaviorSubject<boolean>(false);\n\n  loadCurrentWeatherByCityName(cityName: string): Observable<CurrentWeather> {\n\n    let unit = (this.unitTypeSubject.getValue()) ? FAHRENHEIT_UNIT : CELCIUS_UNIT;\n    \n    const url = APIUrl + Api.endpoints.weather + '?q=' + cityName + '&appid=' + APIKey + '&units=' + unit;\n    return this._http.get<CurrentWeather>(url).pipe(catchError(this.errorHandler));\n    \n  }\n\n  setUnitType(unitType: boolean) {\n    this.unitTypeSubject.next(unitType);\n  }\n\n  getUnitType(): Observable<boolean> {\n    return this.unitTypeSubject.asObservable();\n  }\n\n  errorHandler(error: HttpErrorResponse) {\n    console.error(error);\n    return throwError(error.message || \"Server Error\");\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Weather-Dashboard';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { MainComponent } from './Components/main/main.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LHSContentsComponent } from './Components/lhscontents/lhscontents.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { routing } from './app.routing';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent,\n    LHSContentsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    routing,\n    MatSlideToggleModule,\n    FormsModule,\n    MatInputModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatButtonModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { RouterModule, Routes } from '@angular/router';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { MainComponent } from './Components/main/main.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\r\n    { path: 'dashboard', component: MainComponent},\r\n    { path: '**', redirectTo: '/dashboard', pathMatch: 'full' }\r\n];\r\n\r\nexport const routing: ModuleWithProviders = RouterModule.forRoot(routes);\r\n","export const APIUrl = 'https://api.openweathermap.org/data/2.5/';\r\nexport const APIKey = '0dd5542d536e51ce47540ed11c8f0ebc';\r\n\r\nexport const Api = {\r\n    endpoints: {\r\n        weather: '/weather',\r\n        box: '/box/city',\r\n        find: '/find'\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}